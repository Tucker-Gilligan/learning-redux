{"version":3,"sources":["App.js","actions/index.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","className","onClick","type","payload","counterReducer","action","loggedReducer","allReducers","combineReducers","store","createStore","allReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"gMAkBeA,MAdf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cACjB,OACE,sBAAKC,UAAU,MAAf,UACE,0CAAaN,EAAb,OACA,wBAAQO,QAAS,kBAAMH,ECVpB,CACLI,KAAM,YACNC,QDQ4C,KAA1C,eACA,wBAAQF,QAAS,kBAAMH,ECLpB,CACLI,KAAM,eDIJ,eACCL,EAAW,sEAAgD,O,OEFnDO,EAXQ,WAAwB,IAAvBR,EAAsB,uDAAd,EAAGS,EAAW,uCAC5C,OAAQA,EAAOH,MACb,IAAK,YACH,OAAON,EAAQS,EAAOF,QACxB,IAAK,YACH,OAAOP,EAAQ,EACjB,QACE,OAAOA,ICEEU,EATO,WAA4B,IAA3BV,EAA0B,wDAAXS,EAAW,uCAC/C,OAAQA,EAAOH,MACb,IAAK,UACH,OAAQN,EACV,QACE,OAAOA,ICMEW,EAPKC,YAAgB,CAGlCd,QAASU,EACTP,SAAUS,ICING,EAAQC,YACZC,EACAC,OAAOC,8BAAgCD,OAAOC,gCAGhDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.40e4f328.chunk.js","sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from './actions';\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector(state => state.isLogged);\n  const dispatch = useDispatch();\n  return (\n    <div className='App'>\n      <h1>Counter:{counter} </h1>\n      <button onClick={() => dispatch(increment(5))}>+</button>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      {isLogged ? <h3>Valuable Information I Shouldn't See</h3> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","export const increment = num => {\n  return {\n    type: 'INCREMENT',\n    payload: num,\n  };\n};\nexport const decrement = () => {\n  return {\n    type: 'DECREMENT',\n  };\n};\n","const counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + action.payload;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n","const loggedReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'SIGN_IN':\n      return !state; //could say return true\n    default:\n      return state;\n  }\n};\n\nexport default loggedReducer;\n","import counterReducer from './counter';\nimport loggedReducer from './isLogged';\nimport { combineReducers } from 'redux';\n\nconst allReducers = combineReducers({\n  //\"counter\" can be any name you want\n  //counter is how we will acess counterReducer\n  counter: counterReducer,\n  isLogged: loggedReducer,\n});\n\nexport default allReducers;\n","/* eslint-disable default-case */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport allReducer from './reducers';\nimport { Provider } from 'react-redux';\n\n// won't work, need to use a combined reducer\n// const store = createStore(counterReducer, isLoggedReducer);\n\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}